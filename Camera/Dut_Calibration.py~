#Golden Chirp Step 5:
#Load Camera.ini then calculate per dot CCM, save file.
exec(open('./conveniencefuncs.py').read())
#*************************
#start here
printcheckinfo = True
#Turn all LEDs to 100% duty cycle, perform auto-exposure
RunShellOnChirp(all_on_filename)
led_calibrator = ChirpLEDCalibrator()
led_calibrator.PullReadIrefCalibrationFile()
###Red
led_calibrator.RunShellOnChirp(led_calibrator.all_red_no_iref_filename)
print('LED Red, please measure color coordinates')
red_xval = float(input('X value of Red LED?\n'))
red_yval = float(input('Y value of Red LED?\n'))
red_zval = float(input('Z value of Red LED?\n'))
###Green
led_calibrator.RunShellOnChirp(led_calibrator.all_green_no_iref_filename)
print('LED Green, please measure color coordinates')
green_xval = float(input('X value of Green LED?\n'))
green_yval = float(input('Y value of Green LED?\n'))
green_zval = float(input('Z value of Green LED?\n'))
###Blue
led_calibrator.RunShellOnChirp(led_calibrator.all_blue_no_iref_filename)
print('LED blue, please measure color coordinates')
blue_xval = float(input('X value of Blue LED?\n'))
blue_yval = float(input('Y value of Blue LED?\n'))
blue_zval = float(input('Z value of Blue LED?\n'))
#write to file
step2_filename = 'gc_step2_led_coord.txt'
with open(step2_filename, 'w') as f:
    f.write( '%.5e %.5e %.5e\n' % (red_xval, red_yval, red_zval))
    f.write( '%.5e %.5e %.5e\n' % (green_xval, green_yval, green_zval))
    f.write( '%.5e %.5e %.5e\n' % (blue_xval, blue_yval, blue_zval))
    
#Turn off LEDs
RunShellOnChirp(all_dark_filename)

